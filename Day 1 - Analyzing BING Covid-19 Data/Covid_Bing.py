{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = 'https://raw.githubusercontent.com/microsoft/BingCoronavirusQuerySet/master/data/2020/QueriesByState_2020-10-01_2020-10-31.tsv'\n",
    "df = pd.read_csv(url, sep='\\t', parse_dates=['Date'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Source Info\n",
    "This dataset was curated from the Bing search logs (desktop users only). Only searches that were issued many times by multiple users were included. The dataset includes queries from all over the world that had an intent related to the Coronavirus or Covid-19. In some cases this intent is explicit in the query itself (e.g., “Coronavirus updates Seattle”), in other cases it is implicit , e.g. “Shelter in place”. The implicit intent of search queries (e.g., “Toilet paper”) was extracted using random walks on the click graph as outlined in this paper by Microsoft Research. All personal data were removed.\n",
    "\n",
    "* Specifically this data is targeted only at the Month of October 2020\n",
    "\n",
    "## Data Dictionary - QueriesByState\n",
    "Date : string, Date on which the query was issued.\n",
    "\n",
    "Query : string, The actual search query issued by user(s).\n",
    "\n",
    "IsImplicitIntent : bool, True if query did not mention covid or coronavirus or sarsncov2 (e.g, “Shelter in place”). False otherwise.\n",
    "\n",
    "State : string, State from where the query was issued.\n",
    "\n",
    "Country :string, Country from where the query was issued.\n",
    "\n",
    "PopularityScore : int, Value between 1 and 100 inclusive. 1 indicates least popular query on the day/State/Country with Coronavirus intent, and 100 indicates the most popular query for the same geogrpahy on the same day."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Update Frequency\n",
    "New data will be added once a month until coronavirus is no longer in the news."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Query</th>\n",
       "      <th>IsImplicitIntent</th>\n",
       "      <th>State</th>\n",
       "      <th>Country</th>\n",
       "      <th>PopularityScore</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>morrisons</td>\n",
       "      <td>True</td>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>tgcom</td>\n",
       "      <td>True</td>\n",
       "      <td>Molise</td>\n",
       "      <td>Italy</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>huddersfield examiner</td>\n",
       "      <td>True</td>\n",
       "      <td>Greater Manchester</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>arizona coronavirus</td>\n",
       "      <td>False</td>\n",
       "      <td>Washington</td>\n",
       "      <td>United States</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>sainsburys</td>\n",
       "      <td>True</td>\n",
       "      <td>Cardiff</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date                  Query  IsImplicitIntent               State  \\\n",
       "0 2020-10-01              morrisons              True         Bournemouth   \n",
       "1 2020-10-01                  tgcom              True              Molise   \n",
       "2 2020-10-01  huddersfield examiner              True  Greater Manchester   \n",
       "3 2020-10-01    arizona coronavirus             False          Washington   \n",
       "4 2020-10-01             sainsburys              True             Cardiff   \n",
       "\n",
       "          Country  PopularityScore  \n",
       "0  United Kingdom               22  \n",
       "1           Italy                1  \n",
       "2  United Kingdom                2  \n",
       "3   United States                1  \n",
       "4  United Kingdom               16  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Query</th>\n",
       "      <th>IsImplicitIntent</th>\n",
       "      <th>State</th>\n",
       "      <th>Country</th>\n",
       "      <th>PopularityScore</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>489649</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>protezione civile</td>\n",
       "      <td>True</td>\n",
       "      <td>Friuli-Venezia Giulia</td>\n",
       "      <td>Italy</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>489650</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>worldometer coronavirus</td>\n",
       "      <td>False</td>\n",
       "      <td>Bracknell Forest</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>489651</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>attestation</td>\n",
       "      <td>True</td>\n",
       "      <td>Provence-Alpes-Cote D'azur</td>\n",
       "      <td>France</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>489652</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>the range</td>\n",
       "      <td>True</td>\n",
       "      <td>Kingston Upon Hull</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>489653</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>nachrichten</td>\n",
       "      <td>True</td>\n",
       "      <td>Hesse</td>\n",
       "      <td>Germany</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Date                    Query  IsImplicitIntent  \\\n",
       "489649 2020-10-31        protezione civile              True   \n",
       "489650 2020-10-31  worldometer coronavirus             False   \n",
       "489651 2020-10-31              attestation              True   \n",
       "489652 2020-10-31                the range              True   \n",
       "489653 2020-10-31              nachrichten              True   \n",
       "\n",
       "                             State         Country  PopularityScore  \n",
       "489649       Friuli-Venezia Giulia           Italy                5  \n",
       "489650            Bracknell Forest  United Kingdom               15  \n",
       "489651  Provence-Alpes-Cote D'azur          France               10  \n",
       "489652          Kingston Upon Hull  United Kingdom               35  \n",
       "489653                       Hesse         Germany               49  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "22d9bc40d0c24958ae214647bcebfe8d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(array([357783.,  51553.,  24124.,  14479.,   9153.,   5142.,   3742.,\n",
       "          3065.,   2278.,  18335.]),\n",
       " array([  1. ,  10.9,  20.8,  30.7,  40.6,  50.5,  60.4,  70.3,  80.2,\n",
       "         90.1, 100. ]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#1 indicates least popular query on the day/State/Country with Coronavirus intent, \n",
    "#and 100 indicates the most popular query for the same geogrpahy on the same day.\n",
    "\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.hist(df['PopularityScore'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     0.60073\n",
       "False    0.39927\n",
       "Name: IsImplicitIntent, dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['IsImplicitIntent'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quick thoughts\n",
    "Looks like from an initial peak at the data, 60% of the queries were rated as Implicent Intent. This means that 60% of people were not explicitly searching for Covid-19, and instead were searching for something related to Covid.\n",
    "\n",
    "Most queries were considered unpopular while under 50k queries were close to a popularity score of 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['United Kingdom', 'Italy', 'United States', 'Australia', 'Belgium',\n",
       "       'Japan', 'Germany', 'Czech Republic', 'Portugal', 'India', 'Chile',\n",
       "       'China', 'France', 'Poland', 'Malaysia', 'Peru', 'Denmark',\n",
       "       'Brazil', 'Latvia', 'Saudi Arabia', 'Spain', 'Korea (South)',\n",
       "       'Hungary', 'Sweden', 'Colombia', 'Bulgaria', 'El Salvador',\n",
       "       'Bolivia', 'Mexico', 'Slovak Republic', 'Netherlands', 'Argentina',\n",
       "       'Philippines', 'Austria', 'Switzerland', 'Turkey', 'Tunisia',\n",
       "       'Finland', 'Serbia', 'Greece', 'South Africa', 'New Zealand',\n",
       "       'Thailand', 'Nepal', 'Morocco', 'Croatia', 'Ireland', 'Qatar',\n",
       "       'Botswana', 'Canada', 'Viet Nam', 'Zimbabwe', 'Panama', 'Namibia',\n",
       "       'Lithuania', 'Bahrain', 'Barbados', 'Sri Lanka', 'Ethiopia',\n",
       "       'United Arab Emirates', 'Bangladesh', 'Jamaica', 'Andorra',\n",
       "       'Norway', 'Nigeria', 'Indonesia', 'Georgia', 'Angola', 'Uganda',\n",
       "       'Ecuador', 'Singapore', 'Cuba', 'Ghana', 'Jordan', 'Romania',\n",
       "       'Paraguay', 'Slovenia', 'Pakistan', 'Cyprus', 'Costa Rica',\n",
       "       'Kenya', 'Israel', 'Isle Of Man', 'New Caledonia', 'Iceland',\n",
       "       'Hong Kong', 'Iran', 'Jersey', 'Oman', 'Venezuela', 'Kuwait',\n",
       "       'Algeria', 'Papua New Guinea', 'Taiwan', 'Solomon Islands',\n",
       "       'Tanzania', 'Egypt', 'Martinique', 'Luxembourg',\n",
       "       'Russian Federation', 'Fiji', 'Guatemala', 'Myanmar', 'Mongolia',\n",
       "       'Malta', 'Senegal', 'Bahamas', 'Dominican Republic',\n",
       "       'Trinidad And Tobago', 'Cape Verde', 'Suriname', 'Maldives',\n",
       "       'Cambodia', 'Estonia', 'Afghanistan', 'Lebanon', 'Ukraine',\n",
       "       \"Cote D'ivoire\", 'Belize', 'Saint Kitts And Nevis',\n",
       "       'Bosnia And Herzegovina', 'Albania', 'Azerbaijan', 'Nicaragua',\n",
       "       'Reunion', 'Mauritius', 'Uruguay', 'Saint Lucia',\n",
       "       'French Polynesia', 'Monaco', 'Guadeloupe'], dtype=object)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Country.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Checking out top Queries by popularity score in the US"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Query</th>\n",
       "      <th>IsImplicitIntent</th>\n",
       "      <th>State</th>\n",
       "      <th>Country</th>\n",
       "      <th>PopularityScore</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>313870</th>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Florida</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>461764</th>\n",
       "      <td>2020-10-30</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Kansas</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>275283</th>\n",
       "      <td>2020-10-19</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Minnesota</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217084</th>\n",
       "      <td>2020-10-15</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17855</th>\n",
       "      <td>2020-10-02</td>\n",
       "      <td>hope hicks</td>\n",
       "      <td>True</td>\n",
       "      <td>Arkansas</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119805</th>\n",
       "      <td>2020-10-08</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104726</th>\n",
       "      <td>2020-10-07</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Louisiana</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249807</th>\n",
       "      <td>2020-10-17</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233280</th>\n",
       "      <td>2020-10-16</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Nevada</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249793</th>\n",
       "      <td>2020-10-17</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>New Jersey</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8055</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201469</th>\n",
       "      <td>2020-10-14</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298895</th>\n",
       "      <td>2020-10-20</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Wyoming</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>442243</th>\n",
       "      <td>2020-10-29</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Connecticut</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306414</th>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Arizona</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283428</th>\n",
       "      <td>2020-10-19</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>California</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259448</th>\n",
       "      <td>2020-10-18</td>\n",
       "      <td>sc unemployment</td>\n",
       "      <td>True</td>\n",
       "      <td>South Carolina</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319920</th>\n",
       "      <td>2020-10-21</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Rhode Island</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405901</th>\n",
       "      <td>2020-10-27</td>\n",
       "      <td>mnp</td>\n",
       "      <td>True</td>\n",
       "      <td>Hawaii</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298868</th>\n",
       "      <td>2020-10-20</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>West Virginia</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58394</th>\n",
       "      <td>2020-10-05</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>389167</th>\n",
       "      <td>2020-10-26</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Nebraska</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159998</th>\n",
       "      <td>2020-10-12</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84031</th>\n",
       "      <td>2020-10-06</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139139</th>\n",
       "      <td>2020-10-09</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Maryland</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>357775</th>\n",
       "      <td>2020-10-24</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224267</th>\n",
       "      <td>2020-10-15</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>New Mexico</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>329074</th>\n",
       "      <td>2020-10-22</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Vermont</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>289848</th>\n",
       "      <td>2020-10-20</td>\n",
       "      <td>stimulus update</td>\n",
       "      <td>True</td>\n",
       "      <td>Kentucky</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>487180</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>nd dept of health</td>\n",
       "      <td>True</td>\n",
       "      <td>North Dakota</td>\n",
       "      <td>United States</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Date              Query  IsImplicitIntent           State  \\\n",
       "313870 2020-10-21    stimulus update              True         Florida   \n",
       "461764 2020-10-30    stimulus update              True          Kansas   \n",
       "275283 2020-10-19    stimulus update              True       Minnesota   \n",
       "217084 2020-10-15    stimulus update              True        Michigan   \n",
       "17855  2020-10-02         hope hicks              True        Arkansas   \n",
       "119805 2020-10-08    stimulus update              True         Arizona   \n",
       "104726 2020-10-07    stimulus update              True       Louisiana   \n",
       "249807 2020-10-17    stimulus update              True        Michigan   \n",
       "233280 2020-10-16    stimulus update              True          Nevada   \n",
       "249793 2020-10-17    stimulus update              True      New Jersey   \n",
       "8055   2020-10-01    stimulus update              True          Oregon   \n",
       "201469 2020-10-14    stimulus update              True         Georgia   \n",
       "298895 2020-10-20    stimulus update              True         Wyoming   \n",
       "442243 2020-10-29    stimulus update              True     Connecticut   \n",
       "306414 2020-10-21    stimulus update              True         Arizona   \n",
       "283428 2020-10-19    stimulus update              True      California   \n",
       "259448 2020-10-18    sc unemployment              True  South Carolina   \n",
       "319920 2020-10-21    stimulus update              True    Rhode Island   \n",
       "405901 2020-10-27                mnp              True          Hawaii   \n",
       "298868 2020-10-20    stimulus update              True   West Virginia   \n",
       "58394  2020-10-05    stimulus update              True      New Mexico   \n",
       "389167 2020-10-26    stimulus update              True        Nebraska   \n",
       "159998 2020-10-12    stimulus update              True      New Mexico   \n",
       "84031  2020-10-06    stimulus update              True        Oklahoma   \n",
       "139139 2020-10-09    stimulus update              True        Maryland   \n",
       "357775 2020-10-24    stimulus update              True      New Mexico   \n",
       "224267 2020-10-15    stimulus update              True      New Mexico   \n",
       "329074 2020-10-22    stimulus update              True         Vermont   \n",
       "289848 2020-10-20    stimulus update              True        Kentucky   \n",
       "487180 2020-10-31  nd dept of health              True    North Dakota   \n",
       "\n",
       "              Country  PopularityScore  \n",
       "313870  United States              100  \n",
       "461764  United States              100  \n",
       "275283  United States              100  \n",
       "217084  United States              100  \n",
       "17855   United States              100  \n",
       "119805  United States              100  \n",
       "104726  United States              100  \n",
       "249807  United States              100  \n",
       "233280  United States              100  \n",
       "249793  United States              100  \n",
       "8055    United States              100  \n",
       "201469  United States              100  \n",
       "298895  United States              100  \n",
       "442243  United States              100  \n",
       "306414  United States              100  \n",
       "283428  United States              100  \n",
       "259448  United States              100  \n",
       "319920  United States              100  \n",
       "405901  United States              100  \n",
       "298868  United States              100  \n",
       "58394   United States              100  \n",
       "389167  United States              100  \n",
       "159998  United States              100  \n",
       "84031   United States              100  \n",
       "139139  United States              100  \n",
       "357775  United States              100  \n",
       "224267  United States              100  \n",
       "329074  United States              100  \n",
       "289848  United States              100  \n",
       "487180  United States              100  "
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_value = \"United States\"\n",
    "df_country_value = df.loc[df['Country'] == country_value]\n",
    "\n",
    "df_country_value.sort_values('PopularityScore', ascending = False).head(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Top Query Counts by Country for october"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Query</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Brazil</th>\n",
       "      <td>1499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>1704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>China</th>\n",
       "      <td>1722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Korea (South)</th>\n",
       "      <td>1864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>South Africa</th>\n",
       "      <td>2470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Portugal</th>\n",
       "      <td>2477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Poland</th>\n",
       "      <td>2814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Netherlands</th>\n",
       "      <td>2914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Switzerland</th>\n",
       "      <td>3375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>3434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Belgium</th>\n",
       "      <td>3468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>India</th>\n",
       "      <td>3558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sweden</th>\n",
       "      <td>3745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>7367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spain</th>\n",
       "      <td>8901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Japan</th>\n",
       "      <td>11282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>20578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Germany</th>\n",
       "      <td>26780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Italy</th>\n",
       "      <td>28162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>France</th>\n",
       "      <td>40639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>United Kingdom</th>\n",
       "      <td>134863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>United States</th>\n",
       "      <td>164877</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Query\n",
       "Country               \n",
       "Brazil            1499\n",
       "Austria           1704\n",
       "China             1722\n",
       "Korea (South)     1864\n",
       "South Africa      2470\n",
       "Portugal          2477\n",
       "Poland            2814\n",
       "Netherlands       2914\n",
       "Switzerland       3375\n",
       "Mexico            3434\n",
       "Belgium           3468\n",
       "India             3558\n",
       "Sweden            3745\n",
       "Australia         7367\n",
       "Spain             8901\n",
       "Japan            11282\n",
       "Canada           20578\n",
       "Germany          26780\n",
       "Italy            28162\n",
       "France           40639\n",
       "United Kingdom  134863\n",
       "United States   164877"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_country"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "818f484e374f4cdaa155a420140d110f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2361e568a58>"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#### PLEASE DEFINE WHAT GREATER THAN VALUE YOU'D LIKE TO SEE FOR QUERY\n",
    "q_value = 1000\n",
    "\n",
    "df_country = df.groupby('Country').count()[['Query']]\n",
    "df_country = df_country[df_country['Query'] > q_value]  \n",
    "df_country.sort_values('Query',inplace=True)\n",
    "df_country.plot(kind='barh',figsize=(10, 10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "10     9035\n",
       "17     9241\n",
       "11     9925\n",
       "24    10087\n",
       "18    10461\n",
       "03    10743\n",
       "25    11027\n",
       "31    11382\n",
       "04    11478\n",
       "09    14754\n",
       "16    15862\n",
       "01    16434\n",
       "02    16443\n",
       "23    16528\n",
       "08    17040\n",
       "14    17101\n",
       "07    17174\n",
       "06    17569\n",
       "12    17580\n",
       "13    17834\n",
       "20    17948\n",
       "21    18147\n",
       "26    18229\n",
       "15    18352\n",
       "22    18740\n",
       "27    18799\n",
       "05    18804\n",
       "19    18897\n",
       "28    19482\n",
       "30    20351\n",
       "29    24207\n",
       "Name: Query, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Convert Date to Datetime so groupby can work on dates\n",
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "#Grab dates \n",
    "df_day = df.groupby(df['Date'].dt.strftime('%d'))['Query'].count().sort_values()\n",
    "df_day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e8e6bf374bb0425d8da96467336debda",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Canvas(toolbar=Toolbar(toolitems=[('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x23603587b70>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_day.plot(figsize=(8,6))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
